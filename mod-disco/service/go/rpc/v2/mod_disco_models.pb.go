// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: mod_disco_models.proto

package v2

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SurveyProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyProjectId        string               `protobuf:"bytes,1,opt,name=survey_project_id,json=surveyProjectId,proto3" json:"survey_project_id,omitempty"`
	SysAccountProjectRefId string               `protobuf:"bytes,2,opt,name=sys_account_project_ref_id,json=sysAccountProjectRefId,proto3" json:"sys_account_project_ref_id,omitempty"`
	SurveySchemaTypes      []byte               `protobuf:"bytes,3,opt,name=survey_schema_types,json=surveySchemaTypes,proto3" json:"survey_schema_types,omitempty"` // SurveySchemaType in JSON format
	SurveyFilterTypes      []byte               `protobuf:"bytes,4,opt,name=survey_filter_types,json=surveyFilterTypes,proto3" json:"survey_filter_types,omitempty"` // SurveyFilterType in JSON format
	CreatedAt              *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SurveyProject) Reset() {
	*x = SurveyProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyProject) ProtoMessage() {}

func (x *SurveyProject) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyProject.ProtoReflect.Descriptor instead.
func (*SurveyProject) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{0}
}

func (x *SurveyProject) GetSurveyProjectId() string {
	if x != nil {
		return x.SurveyProjectId
	}
	return ""
}

func (x *SurveyProject) GetSysAccountProjectRefId() string {
	if x != nil {
		return x.SysAccountProjectRefId
	}
	return ""
}

func (x *SurveyProject) GetSurveySchemaTypes() []byte {
	if x != nil {
		return x.SurveySchemaTypes
	}
	return nil
}

func (x *SurveyProject) GetSurveyFilterTypes() []byte {
	if x != nil {
		return x.SurveyFilterTypes
	}
	return nil
}

func (x *SurveyProject) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SurveyProject) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SurveyUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyUserId           string               `protobuf:"bytes,1,opt,name=survey_user_id,json=surveyUserId,proto3" json:"survey_user_id,omitempty"`
	SurveyProjectRefId     string               `protobuf:"bytes,2,opt,name=survey_project_ref_id,json=surveyProjectRefId,proto3" json:"survey_project_ref_id,omitempty"`
	SysAccountAccountRefId string               `protobuf:"bytes,3,opt,name=sys_account_account_ref_id,json=sysAccountAccountRefId,proto3" json:"sys_account_account_ref_id,omitempty"`
	SurveySchemaValues     []byte               `protobuf:"bytes,4,opt,name=survey_schema_values,json=surveySchemaValues,proto3" json:"survey_schema_values,omitempty"`
	SurveySchemaFilters    []byte               `protobuf:"bytes,5,opt,name=survey_schema_filters,json=surveySchemaFilters,proto3" json:"survey_schema_filters,omitempty"` // serialized to strongly typed stuff in DB
	CreatedAt              *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SurveyUser) Reset() {
	*x = SurveyUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyUser) ProtoMessage() {}

func (x *SurveyUser) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyUser.ProtoReflect.Descriptor instead.
func (*SurveyUser) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{1}
}

func (x *SurveyUser) GetSurveyUserId() string {
	if x != nil {
		return x.SurveyUserId
	}
	return ""
}

func (x *SurveyUser) GetSurveyProjectRefId() string {
	if x != nil {
		return x.SurveyProjectRefId
	}
	return ""
}

func (x *SurveyUser) GetSysAccountAccountRefId() string {
	if x != nil {
		return x.SysAccountAccountRefId
	}
	return ""
}

func (x *SurveyUser) GetSurveySchemaValues() []byte {
	if x != nil {
		return x.SurveySchemaValues
	}
	return nil
}

func (x *SurveyUser) GetSurveySchemaFilters() []byte {
	if x != nil {
		return x.SurveySchemaFilters
	}
	return nil
}

func (x *SurveyUser) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SurveyUser) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type DiscoProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId              string               `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SysAccountProjectRefId string               `protobuf:"bytes,2,opt,name=sys_account_project_ref_id,json=sysAccountProjectRefId,proto3" json:"sys_account_project_ref_id,omitempty"` // account project id
	SysAccountProjectOrgId string               `protobuf:"bytes,3,opt,name=sys_account_project_org_id,json=sysAccountProjectOrgId,proto3" json:"sys_account_project_org_id,omitempty"` // account org id
	Goal                   string               `protobuf:"bytes,4,opt,name=goal,proto3" json:"goal,omitempty"`
	AlreadyPledged         uint64               `protobuf:"varint,5,opt,name=already_pledged,json=alreadyPledged,proto3" json:"already_pledged,omitempty"`
	ActionTime             *timestamp.Timestamp `protobuf:"bytes,6,opt,name=action_time,json=actionTime,proto3" json:"action_time,omitempty"`
	ActionLocation         string               `protobuf:"bytes,7,opt,name=action_location,json=actionLocation,proto3" json:"action_location,omitempty"`
	MinPioneers            uint64               `protobuf:"varint,8,opt,name=min_pioneers,json=minPioneers,proto3" json:"min_pioneers,omitempty"`
	MinRebelsMedia         uint64               `protobuf:"varint,9,opt,name=min_rebels_media,json=minRebelsMedia,proto3" json:"min_rebels_media,omitempty"`
	MinRebelsToWin         uint64               `protobuf:"varint,10,opt,name=min_rebels_to_win,json=minRebelsToWin,proto3" json:"min_rebels_to_win,omitempty"`
	ActionLength           string               `protobuf:"bytes,11,opt,name=action_length,json=actionLength,proto3" json:"action_length,omitempty"`
	ActionType             string               `protobuf:"bytes,12,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Category               string               `protobuf:"bytes,14,opt,name=category,proto3" json:"category,omitempty"`
	Contact                string               `protobuf:"bytes,15,opt,name=contact,proto3" json:"contact,omitempty"`
	HistPrecedents         string               `protobuf:"bytes,16,opt,name=hist_precedents,json=histPrecedents,proto3" json:"hist_precedents,omitempty"`
	Strategy               string               `protobuf:"bytes,17,opt,name=strategy,proto3" json:"strategy,omitempty"`
	VideoUrl               []string             `protobuf:"bytes,18,rep,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	UnitOfMeasures         string               `protobuf:"bytes,19,opt,name=unit_of_measures,json=unitOfMeasures,proto3" json:"unit_of_measures,omitempty"`
	CreatedAt              *timestamp.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt              *timestamp.Timestamp `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DiscoProject) Reset() {
	*x = DiscoProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoProject) ProtoMessage() {}

func (x *DiscoProject) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoProject.ProtoReflect.Descriptor instead.
func (*DiscoProject) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{2}
}

func (x *DiscoProject) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DiscoProject) GetSysAccountProjectRefId() string {
	if x != nil {
		return x.SysAccountProjectRefId
	}
	return ""
}

func (x *DiscoProject) GetSysAccountProjectOrgId() string {
	if x != nil {
		return x.SysAccountProjectOrgId
	}
	return ""
}

func (x *DiscoProject) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *DiscoProject) GetAlreadyPledged() uint64 {
	if x != nil {
		return x.AlreadyPledged
	}
	return 0
}

func (x *DiscoProject) GetActionTime() *timestamp.Timestamp {
	if x != nil {
		return x.ActionTime
	}
	return nil
}

func (x *DiscoProject) GetActionLocation() string {
	if x != nil {
		return x.ActionLocation
	}
	return ""
}

func (x *DiscoProject) GetMinPioneers() uint64 {
	if x != nil {
		return x.MinPioneers
	}
	return 0
}

func (x *DiscoProject) GetMinRebelsMedia() uint64 {
	if x != nil {
		return x.MinRebelsMedia
	}
	return 0
}

func (x *DiscoProject) GetMinRebelsToWin() uint64 {
	if x != nil {
		return x.MinRebelsToWin
	}
	return 0
}

func (x *DiscoProject) GetActionLength() string {
	if x != nil {
		return x.ActionLength
	}
	return ""
}

func (x *DiscoProject) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *DiscoProject) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DiscoProject) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *DiscoProject) GetHistPrecedents() string {
	if x != nil {
		return x.HistPrecedents
	}
	return ""
}

func (x *DiscoProject) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *DiscoProject) GetVideoUrl() []string {
	if x != nil {
		return x.VideoUrl
	}
	return nil
}

func (x *DiscoProject) GetUnitOfMeasures() string {
	if x != nil {
		return x.UnitOfMeasures
	}
	return ""
}

func (x *DiscoProject) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DiscoProject) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type NewDiscoProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysAccountProjectRefId string               `protobuf:"bytes,1,opt,name=sys_account_project_ref_id,json=sysAccountProjectRefId,proto3" json:"sys_account_project_ref_id,omitempty"` // account project id
	SysAccountProjectOrgId string               `protobuf:"bytes,2,opt,name=sys_account_project_org_id,json=sysAccountProjectOrgId,proto3" json:"sys_account_project_org_id,omitempty"` // account org id
	Goal                   string               `protobuf:"bytes,3,opt,name=goal,proto3" json:"goal,omitempty"`
	AlreadyPledged         uint64               `protobuf:"varint,4,opt,name=already_pledged,json=alreadyPledged,proto3" json:"already_pledged,omitempty"`
	ActionTime             *timestamp.Timestamp `protobuf:"bytes,5,opt,name=action_time,json=actionTime,proto3" json:"action_time,omitempty"`
	ActionLocation         string               `protobuf:"bytes,6,opt,name=action_location,json=actionLocation,proto3" json:"action_location,omitempty"`
	MinPioneers            uint64               `protobuf:"varint,7,opt,name=min_pioneers,json=minPioneers,proto3" json:"min_pioneers,omitempty"`
	MinRebelsMedia         uint64               `protobuf:"varint,8,opt,name=min_rebels_media,json=minRebelsMedia,proto3" json:"min_rebels_media,omitempty"`
	MinRebelsToWin         uint64               `protobuf:"varint,9,opt,name=min_rebels_to_win,json=minRebelsToWin,proto3" json:"min_rebels_to_win,omitempty"`
	ActionLength           string               `protobuf:"bytes,10,opt,name=action_length,json=actionLength,proto3" json:"action_length,omitempty"`
	ActionType             string               `protobuf:"bytes,11,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Category               string               `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
	Contact                string               `protobuf:"bytes,13,opt,name=contact,proto3" json:"contact,omitempty"`
	HistPrecedents         string               `protobuf:"bytes,14,opt,name=hist_precedents,json=histPrecedents,proto3" json:"hist_precedents,omitempty"`
	Strategy               string               `protobuf:"bytes,15,opt,name=strategy,proto3" json:"strategy,omitempty"`
	VideoUrl               []string             `protobuf:"bytes,16,rep,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	UnitOfMeasures         string               `protobuf:"bytes,17,opt,name=unit_of_measures,json=unitOfMeasures,proto3" json:"unit_of_measures,omitempty"`
}

func (x *NewDiscoProjectRequest) Reset() {
	*x = NewDiscoProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDiscoProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDiscoProjectRequest) ProtoMessage() {}

func (x *NewDiscoProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDiscoProjectRequest.ProtoReflect.Descriptor instead.
func (*NewDiscoProjectRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{3}
}

func (x *NewDiscoProjectRequest) GetSysAccountProjectRefId() string {
	if x != nil {
		return x.SysAccountProjectRefId
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetSysAccountProjectOrgId() string {
	if x != nil {
		return x.SysAccountProjectOrgId
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetAlreadyPledged() uint64 {
	if x != nil {
		return x.AlreadyPledged
	}
	return 0
}

func (x *NewDiscoProjectRequest) GetActionTime() *timestamp.Timestamp {
	if x != nil {
		return x.ActionTime
	}
	return nil
}

func (x *NewDiscoProjectRequest) GetActionLocation() string {
	if x != nil {
		return x.ActionLocation
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetMinPioneers() uint64 {
	if x != nil {
		return x.MinPioneers
	}
	return 0
}

func (x *NewDiscoProjectRequest) GetMinRebelsMedia() uint64 {
	if x != nil {
		return x.MinRebelsMedia
	}
	return 0
}

func (x *NewDiscoProjectRequest) GetMinRebelsToWin() uint64 {
	if x != nil {
		return x.MinRebelsToWin
	}
	return 0
}

func (x *NewDiscoProjectRequest) GetActionLength() string {
	if x != nil {
		return x.ActionLength
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetHistPrecedents() string {
	if x != nil {
		return x.HistPrecedents
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *NewDiscoProjectRequest) GetVideoUrl() []string {
	if x != nil {
		return x.VideoUrl
	}
	return nil
}

func (x *NewDiscoProjectRequest) GetUnitOfMeasures() string {
	if x != nil {
		return x.UnitOfMeasures
	}
	return ""
}

type UpdateDiscoProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId      string               `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Goal           string               `protobuf:"bytes,2,opt,name=goal,proto3" json:"goal,omitempty"`
	AlreadyPledged uint64               `protobuf:"varint,3,opt,name=already_pledged,json=alreadyPledged,proto3" json:"already_pledged,omitempty"`
	ActionTime     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=action_time,json=actionTime,proto3" json:"action_time,omitempty"`
	ActionLocation string               `protobuf:"bytes,5,opt,name=action_location,json=actionLocation,proto3" json:"action_location,omitempty"`
	MinPioneers    uint64               `protobuf:"varint,6,opt,name=min_pioneers,json=minPioneers,proto3" json:"min_pioneers,omitempty"`
	MinRebelsMedia uint64               `protobuf:"varint,7,opt,name=min_rebels_media,json=minRebelsMedia,proto3" json:"min_rebels_media,omitempty"`
	MinRebelsToWin uint64               `protobuf:"varint,8,opt,name=min_rebels_to_win,json=minRebelsToWin,proto3" json:"min_rebels_to_win,omitempty"`
	ActionLength   string               `protobuf:"bytes,9,opt,name=action_length,json=actionLength,proto3" json:"action_length,omitempty"`
	ActionType     string               `protobuf:"bytes,10,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Category       string               `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
	Contact        string               `protobuf:"bytes,12,opt,name=contact,proto3" json:"contact,omitempty"`
	HistPrecedents string               `protobuf:"bytes,13,opt,name=hist_precedents,json=histPrecedents,proto3" json:"hist_precedents,omitempty"`
	Strategy       string               `protobuf:"bytes,14,opt,name=strategy,proto3" json:"strategy,omitempty"`
	VideoUrl       []string             `protobuf:"bytes,15,rep,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	UnitOfMeasures string               `protobuf:"bytes,16,opt,name=unit_of_measures,json=unitOfMeasures,proto3" json:"unit_of_measures,omitempty"`
}

func (x *UpdateDiscoProjectRequest) Reset() {
	*x = UpdateDiscoProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscoProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscoProjectRequest) ProtoMessage() {}

func (x *UpdateDiscoProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscoProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateDiscoProjectRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateDiscoProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetGoal() string {
	if x != nil {
		return x.Goal
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetAlreadyPledged() uint64 {
	if x != nil {
		return x.AlreadyPledged
	}
	return 0
}

func (x *UpdateDiscoProjectRequest) GetActionTime() *timestamp.Timestamp {
	if x != nil {
		return x.ActionTime
	}
	return nil
}

func (x *UpdateDiscoProjectRequest) GetActionLocation() string {
	if x != nil {
		return x.ActionLocation
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetMinPioneers() uint64 {
	if x != nil {
		return x.MinPioneers
	}
	return 0
}

func (x *UpdateDiscoProjectRequest) GetMinRebelsMedia() uint64 {
	if x != nil {
		return x.MinRebelsMedia
	}
	return 0
}

func (x *UpdateDiscoProjectRequest) GetMinRebelsToWin() uint64 {
	if x != nil {
		return x.MinRebelsToWin
	}
	return 0
}

func (x *UpdateDiscoProjectRequest) GetActionLength() string {
	if x != nil {
		return x.ActionLength
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetHistPrecedents() string {
	if x != nil {
		return x.HistPrecedents
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *UpdateDiscoProjectRequest) GetVideoUrl() []string {
	if x != nil {
		return x.VideoUrl
	}
	return nil
}

func (x *UpdateDiscoProjectRequest) GetUnitOfMeasures() string {
	if x != nil {
		return x.UnitOfMeasures
	}
	return ""
}

type IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyUserId        string `protobuf:"bytes,1,opt,name=survey_user_id,json=surveyUserId,proto3" json:"survey_user_id,omitempty"`
	SysAccountProjectId string `protobuf:"bytes,2,opt,name=sys_account_project_id,json=sysAccountProjectId,proto3" json:"sys_account_project_id,omitempty"`
	SurveyProjectId     string `protobuf:"bytes,3,opt,name=survey_project_id,json=surveyProjectId,proto3" json:"survey_project_id,omitempty"`
	SysAccountAccountId string `protobuf:"bytes,4,opt,name=sys_account_account_id,json=sysAccountAccountId,proto3" json:"sys_account_account_id,omitempty"`
}

func (x *IdRequest) Reset() {
	*x = IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRequest) ProtoMessage() {}

func (x *IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRequest.ProtoReflect.Descriptor instead.
func (*IdRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{5}
}

func (x *IdRequest) GetSurveyUserId() string {
	if x != nil {
		return x.SurveyUserId
	}
	return ""
}

func (x *IdRequest) GetSysAccountProjectId() string {
	if x != nil {
		return x.SysAccountProjectId
	}
	return ""
}

func (x *IdRequest) GetSurveyProjectId() string {
	if x != nil {
		return x.SurveyProjectId
	}
	return ""
}

func (x *IdRequest) GetSysAccountAccountId() string {
	if x != nil {
		return x.SysAccountAccountId
	}
	return ""
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdRequest      *IdRequest `protobuf:"bytes,1,opt,name=id_request,json=idRequest,proto3" json:"id_request,omitempty"`
	PerPageEntries int64      `protobuf:"varint,2,opt,name=per_page_entries,json=perPageEntries,proto3" json:"per_page_entries,omitempty"`
	OrderBy        string     `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	CurrentPageId  string     `protobuf:"bytes,4,opt,name=current_page_id,json=currentPageId,proto3" json:"current_page_id,omitempty"`
	Filters        []byte     `protobuf:"bytes,5,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{6}
}

func (x *ListRequest) GetIdRequest() *IdRequest {
	if x != nil {
		return x.IdRequest
	}
	return nil
}

func (x *ListRequest) GetPerPageEntries() int64 {
	if x != nil {
		return x.PerPageEntries
	}
	return 0
}

func (x *ListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListRequest) GetCurrentPageId() string {
	if x != nil {
		return x.CurrentPageId
	}
	return ""
}

func (x *ListRequest) GetFilters() []byte {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyProjects []*SurveyProject `protobuf:"bytes,1,rep,name=survey_projects,json=surveyProjects,proto3" json:"survey_projects,omitempty"`
	SurveyUsers    []*SurveyUser    `protobuf:"bytes,2,rep,name=survey_users,json=surveyUsers,proto3" json:"survey_users,omitempty"`
	NextPageId     int64            `protobuf:"varint,3,opt,name=next_page_id,json=nextPageId,proto3" json:"next_page_id,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{7}
}

func (x *ListResponse) GetSurveyProjects() []*SurveyProject {
	if x != nil {
		return x.SurveyProjects
	}
	return nil
}

func (x *ListResponse) GetSurveyUsers() []*SurveyUser {
	if x != nil {
		return x.SurveyUsers
	}
	return nil
}

func (x *ListResponse) GetNextPageId() int64 {
	if x != nil {
		return x.NextPageId
	}
	return 0
}

type NewSurveyProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysAccountProjectRefId string `protobuf:"bytes,1,opt,name=sys_account_project_ref_id,json=sysAccountProjectRefId,proto3" json:"sys_account_project_ref_id,omitempty"`
	SurveySchemaTypes      []byte `protobuf:"bytes,2,opt,name=survey_schema_types,json=surveySchemaTypes,proto3" json:"survey_schema_types,omitempty"`
	SurveyFilterTypes      []byte `protobuf:"bytes,3,opt,name=survey_filter_types,json=surveyFilterTypes,proto3" json:"survey_filter_types,omitempty"`
}

func (x *NewSurveyProjectRequest) Reset() {
	*x = NewSurveyProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSurveyProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSurveyProjectRequest) ProtoMessage() {}

func (x *NewSurveyProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSurveyProjectRequest.ProtoReflect.Descriptor instead.
func (*NewSurveyProjectRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{8}
}

func (x *NewSurveyProjectRequest) GetSysAccountProjectRefId() string {
	if x != nil {
		return x.SysAccountProjectRefId
	}
	return ""
}

func (x *NewSurveyProjectRequest) GetSurveySchemaTypes() []byte {
	if x != nil {
		return x.SurveySchemaTypes
	}
	return nil
}

func (x *NewSurveyProjectRequest) GetSurveyFilterTypes() []byte {
	if x != nil {
		return x.SurveyFilterTypes
	}
	return nil
}

type NewSurveyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyProjectRefId  string `protobuf:"bytes,1,opt,name=survey_project_ref_id,json=surveyProjectRefId,proto3" json:"survey_project_ref_id,omitempty"`
	SysAccountUserRefId string `protobuf:"bytes,2,opt,name=sys_account_user_ref_id,json=sysAccountUserRefId,proto3" json:"sys_account_user_ref_id,omitempty"`
	SurveySchemaTypes   []byte `protobuf:"bytes,3,opt,name=survey_schema_types,json=surveySchemaTypes,proto3" json:"survey_schema_types,omitempty"`
	SurveyFilterTypes   []byte `protobuf:"bytes,4,opt,name=survey_filter_types,json=surveyFilterTypes,proto3" json:"survey_filter_types,omitempty"`
}

func (x *NewSurveyUserRequest) Reset() {
	*x = NewSurveyUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSurveyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSurveyUserRequest) ProtoMessage() {}

func (x *NewSurveyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSurveyUserRequest.ProtoReflect.Descriptor instead.
func (*NewSurveyUserRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{9}
}

func (x *NewSurveyUserRequest) GetSurveyProjectRefId() string {
	if x != nil {
		return x.SurveyProjectRefId
	}
	return ""
}

func (x *NewSurveyUserRequest) GetSysAccountUserRefId() string {
	if x != nil {
		return x.SysAccountUserRefId
	}
	return ""
}

func (x *NewSurveyUserRequest) GetSurveySchemaTypes() []byte {
	if x != nil {
		return x.SurveySchemaTypes
	}
	return nil
}

func (x *NewSurveyUserRequest) GetSurveyFilterTypes() []byte {
	if x != nil {
		return x.SurveyFilterTypes
	}
	return nil
}

type UpdateSurveyProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyProjectId   string `protobuf:"bytes,1,opt,name=survey_project_id,json=surveyProjectId,proto3" json:"survey_project_id,omitempty"`
	SurveySchemaTypes []byte `protobuf:"bytes,2,opt,name=survey_schema_types,json=surveySchemaTypes,proto3" json:"survey_schema_types,omitempty"`
	SurveyFilterTypes []byte `protobuf:"bytes,3,opt,name=survey_filter_types,json=surveyFilterTypes,proto3" json:"survey_filter_types,omitempty"`
}

func (x *UpdateSurveyProjectRequest) Reset() {
	*x = UpdateSurveyProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSurveyProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSurveyProjectRequest) ProtoMessage() {}

func (x *UpdateSurveyProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSurveyProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateSurveyProjectRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateSurveyProjectRequest) GetSurveyProjectId() string {
	if x != nil {
		return x.SurveyProjectId
	}
	return ""
}

func (x *UpdateSurveyProjectRequest) GetSurveySchemaTypes() []byte {
	if x != nil {
		return x.SurveySchemaTypes
	}
	return nil
}

func (x *UpdateSurveyProjectRequest) GetSurveyFilterTypes() []byte {
	if x != nil {
		return x.SurveyFilterTypes
	}
	return nil
}

type UpdateSurveyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyUserId       string `protobuf:"bytes,1,opt,name=survey_user_id,json=surveyUserId,proto3" json:"survey_user_id,omitempty"`
	SurveySchemaValues []byte `protobuf:"bytes,2,opt,name=survey_schema_values,json=surveySchemaValues,proto3" json:"survey_schema_values,omitempty"`
	SurveyFilterValues []byte `protobuf:"bytes,3,opt,name=survey_filter_values,json=surveyFilterValues,proto3" json:"survey_filter_values,omitempty"`
}

func (x *UpdateSurveyUserRequest) Reset() {
	*x = UpdateSurveyUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mod_disco_models_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSurveyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSurveyUserRequest) ProtoMessage() {}

func (x *UpdateSurveyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mod_disco_models_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSurveyUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateSurveyUserRequest) Descriptor() ([]byte, []int) {
	return file_mod_disco_models_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateSurveyUserRequest) GetSurveyUserId() string {
	if x != nil {
		return x.SurveyUserId
	}
	return ""
}

func (x *UpdateSurveyUserRequest) GetSurveySchemaValues() []byte {
	if x != nil {
		return x.SurveySchemaValues
	}
	return nil
}

func (x *UpdateSurveyUserRequest) GetSurveyFilterValues() []byte {
	if x != nil {
		return x.SurveyFilterValues
	}
	return nil
}

var File_mod_disco_models_proto protoreflect.FileDescriptor

var file_mod_disco_models_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcd, 0x02, 0x0a, 0x0d, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x1a, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xfd, 0x02, 0x0a, 0x0a, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x79,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xbe, 0x06, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a,
	0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x62,
	0x65, 0x6c, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x54, 0x6f,
	0x57, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69,
	0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xb3, 0x05, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x1a,
	0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x79,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x50, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x62, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x54, 0x6f, 0x57, 0x69, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x68,
	0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x50, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x62, 0x65,
	0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x62, 0x65, 0x6c, 0x73, 0x54, 0x6f, 0x57, 0x69, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x68,
	0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x09, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73,
	0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x79, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x79,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x0b, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0xb5, 0x01, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x1a, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x14, 0x4e, 0x65,
	0x77, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x17, 0x73, 0x79, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x79, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x3a, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x6f,
	0x75, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x2f, 0x6d, 0x6f, 0x64,
	0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67,
	0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mod_disco_models_proto_rawDescOnce sync.Once
	file_mod_disco_models_proto_rawDescData = file_mod_disco_models_proto_rawDesc
)

func file_mod_disco_models_proto_rawDescGZIP() []byte {
	file_mod_disco_models_proto_rawDescOnce.Do(func() {
		file_mod_disco_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_mod_disco_models_proto_rawDescData)
	})
	return file_mod_disco_models_proto_rawDescData
}

var file_mod_disco_models_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_mod_disco_models_proto_goTypes = []interface{}{
	(*SurveyProject)(nil),              // 0: v2.mod_disco.services.SurveyProject
	(*SurveyUser)(nil),                 // 1: v2.mod_disco.services.SurveyUser
	(*DiscoProject)(nil),               // 2: v2.mod_disco.services.DiscoProject
	(*NewDiscoProjectRequest)(nil),     // 3: v2.mod_disco.services.NewDiscoProjectRequest
	(*UpdateDiscoProjectRequest)(nil),  // 4: v2.mod_disco.services.UpdateDiscoProjectRequest
	(*IdRequest)(nil),                  // 5: v2.mod_disco.services.IdRequest
	(*ListRequest)(nil),                // 6: v2.mod_disco.services.ListRequest
	(*ListResponse)(nil),               // 7: v2.mod_disco.services.ListResponse
	(*NewSurveyProjectRequest)(nil),    // 8: v2.mod_disco.services.NewSurveyProjectRequest
	(*NewSurveyUserRequest)(nil),       // 9: v2.mod_disco.services.NewSurveyUserRequest
	(*UpdateSurveyProjectRequest)(nil), // 10: v2.mod_disco.services.UpdateSurveyProjectRequest
	(*UpdateSurveyUserRequest)(nil),    // 11: v2.mod_disco.services.UpdateSurveyUserRequest
	(*timestamp.Timestamp)(nil),        // 12: google.protobuf.Timestamp
}
var file_mod_disco_models_proto_depIdxs = []int32{
	12, // 0: v2.mod_disco.services.SurveyProject.created_at:type_name -> google.protobuf.Timestamp
	12, // 1: v2.mod_disco.services.SurveyProject.updated_at:type_name -> google.protobuf.Timestamp
	12, // 2: v2.mod_disco.services.SurveyUser.created_at:type_name -> google.protobuf.Timestamp
	12, // 3: v2.mod_disco.services.SurveyUser.updated_at:type_name -> google.protobuf.Timestamp
	12, // 4: v2.mod_disco.services.DiscoProject.action_time:type_name -> google.protobuf.Timestamp
	12, // 5: v2.mod_disco.services.DiscoProject.created_at:type_name -> google.protobuf.Timestamp
	12, // 6: v2.mod_disco.services.DiscoProject.updated_at:type_name -> google.protobuf.Timestamp
	12, // 7: v2.mod_disco.services.NewDiscoProjectRequest.action_time:type_name -> google.protobuf.Timestamp
	12, // 8: v2.mod_disco.services.UpdateDiscoProjectRequest.action_time:type_name -> google.protobuf.Timestamp
	5,  // 9: v2.mod_disco.services.ListRequest.id_request:type_name -> v2.mod_disco.services.IdRequest
	0,  // 10: v2.mod_disco.services.ListResponse.survey_projects:type_name -> v2.mod_disco.services.SurveyProject
	1,  // 11: v2.mod_disco.services.ListResponse.survey_users:type_name -> v2.mod_disco.services.SurveyUser
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_mod_disco_models_proto_init() }
func file_mod_disco_models_proto_init() {
	if File_mod_disco_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mod_disco_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDiscoProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiscoProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSurveyProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSurveyUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSurveyProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mod_disco_models_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSurveyUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mod_disco_models_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mod_disco_models_proto_goTypes,
		DependencyIndexes: file_mod_disco_models_proto_depIdxs,
		MessageInfos:      file_mod_disco_models_proto_msgTypes,
	}.Build()
	File_mod_disco_models_proto = out.File
	file_mod_disco_models_proto_rawDesc = nil
	file_mod_disco_models_proto_goTypes = nil
	file_mod_disco_models_proto_depIdxs = nil
}
